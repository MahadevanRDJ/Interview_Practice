package August;

public class RotateFunction {
    public static void main(String[] args) {
     new RotateFunction().maxRotateFunction(
        -56,-66,-60,-76,-20,51,-91,-2,-20,33,39,97,-95,-95,-18,-32,-54,-60,41,85,25,-14,-34,-4,37,71,75,-63,4,6,69,-44,54,-26,59,25,34,-17,-22,58,-97,71,29,81,76,9,82,-65,-25,-27,-62,21,30,91,-16,-93,69,97,0,-41,63,-14,58,96,-62,-40,74,-65,93,86,86,42,-48,-92,-80,-99,83,53,-47,95,-68,-80,-29,-59,61,38,-91,65,-96,-12,-29,6,-16,-21,-24,-49,99,-90,7,-8,88,66,1,-45,-2,-80,49,-40,-7,23,81,-51,19,-54,-46,-93,-26,-51,55,-5,47,36,93,-71,-84,86,-89,66,-29,39,25,-44,-75,-4,55,-25,41,37,-77,-38,99,100,16,35,-70,27,-84,-19,68,78,19,-62,-83,5,-95,-30,-27,-80,-28,28,-1,15,-50,39,-60,-30,-71,92,-39,-67,-54,-94,-87,16,1,-33,58,4,74,64,1,-10,-57,-31,-51,-14,-42,-42,-68,98,19,54,-50,-3,40,-77,35,29,4,-91,21,-78,69,8
        ,85,43,-24,67,35,32,-83,-91,-34,80,-26,49,-22,86,-1,-58,-42,-55,4,-5,-85,78,-49,-93,69,-99,17,-59,31,-5,-77,77,-82,-49,-74,15,-18,72,36,54,31,60,-11,48,85,-95,49,68,70,-52,-93,7,-42,24,-16,43,90,-70,-27,-92,-87,22,95,100,58,-38,-87,-37,-28,21,-14,70,-96,-68,-29,-57,31,55,87,-24,-32,63,70,-73,80,-39,-94,19,34,4,77,90,44,-26,47,100,59,-8,55,22,84,-14,30,70,-67,62,15,-63,-76,-6,-41,-100,94,31,65,100,54,-99,2,-80,-14,-69,27,-24,21,-4,39,-49,100,-61,19,50,96,97,91,-24,9,59,89,44,88,-13,10,21,-75,67,7,54,-75,-84,37,-82,31,-94,81,-38,25,-76,-52,-18,-62,31,-13,-5,-28,78,23,-69,-54,82,-23,-22,-18,73,-89,-39,8,23,68,-67,61,-67,47,5,-17,41,32,-86,-36,50,-75,-89,42,-56,84,34,65,-4,-4,52,-58,68,59,67,-31,-83,-82,33,-51,-79,-17,-89,11,-6,-29,45,-45,20,-50,75,-88,15,8,-21,12,-23,19,71,-27,-100,79,-80,46,53,-14,55,-6,-1,-93,14,57,72,56,-83,-35,95,51,17,58,-52,69,-54,41,-70,-52,-45,-45,11,65,-64,31,-1,-40,-45,-81,-87,-37,-81,-78,20,-97,-26,-70,25,-34,77,53,-82,80,-54,0,58,-60,-50,44,-62,-87,20,-49,-33,25,-35,-81,-29,89,7,-20,10,33,59,-53,89,-88,11,-91,56,-24,-69,-9,20,-27,66,86,79,37,37,15,-26,15,-81,40,-37,69,63,94,59,26,-8,-60,38,-96,85,-67,58,3,41,39,99,59,-65,79,89,-88,-59,-99,-18,-53,-27,33,76,-11,25,-82,-85,55,-37,31,-4,79,-88,18,-27,-81,-24,78,-23,48,-80,-52,12,-56,99,42,-71,-97,45,-39,97,98,-62,67,-19,-17,-53,-22,-17,98,90,-18,-19,93,-69,97,-63,52,59,86,18,-37,80,61,-44,-79,-67,71,-94,-25,-53,-70,-5,-68,37,94,80,68,19,52,78,20,-92,91,-25,-49,-9,-49,51,-85,-5,-50,-22,19,35,-95,-43,39,69,11,4,12,63,-8,25,-31,-97,-65,-87,-48,-17,54,38,16,-40,17,-27,61,67,-81,-3,-91,-21,75,79,97,21,-2,26,92,35,24,40,-82,84,-16,-78,31,-59,-7,82,90,40,-53,-46,79,-98,-88,-17,62,70,42,17,80,-42,-2,42,62,97,-44,-23,15,100,-82,-88,16,-80,-17,83,56,-38,-19,18,11,-6,100,-89,37,39,-43,71,-44,-66,27,-75,-57,78,36,37,-13,30,95,40,55,-55,-99,96,67,36,69,27,41,-88,-18,63,94,3,79,1,91,-38,12,-13,33,41,21,-57,95,99,0,-13,-46,43,-36,-67,82,-81,-1,-90,-12,-49,-78,-3,81,-79,87,-29,66,-38,0,-20,53,-29,33,-40,-68,39,73,56,-85,-22,-62,-12,83,46,36,74,11,-77,-17,37,-27,36,43,-1,-37,62,-60,-2,-30,-61,24,71,47,96,94,80,-74,-24,-81,77,45,12,-81,62,-76,-39,8,-2,72,85,-77,-92,-69,-77,59,-22,-29,-83,-43,35,-49,-76,66,86,24,58,81,9,86,68,77,-81,-56,-76,19,95,-23,47,96,-48,65,90,-45,8,54,-32,38,70,5,66,46,-76,-82,-19,6,91,80,-57,100,-67,81,-53,-60,26,62,-46,-46,29,2,91,-60,68,-54,75,-90,95,49,-96,14,-22,-37,-7,-74,40,-28,75,-32,28,98,18,-58,49,78,-22,-38,-93,2,-23,-50,-96,-91,95,-93,-53,77,-65,49,-46,66,-39,-35,-62,70,79,32,33,-80,82,4,87,54,-100,-49,-15,-50,46,70,18,21,-84,-90,-32,-21,-4,-87,-35,75,25,-91,-14,-10,19,-13,-13,36,92,62,79,62,-22,5,-74,42,83,-4,52,6,-52,28,39,-74,39,-88,-81,-79,8,-26,-21,-31,-72,68,-27,74,-3,9,35,2,-23,15,-8,-16,-82,-1,-13,-47,-1,-49,-16,-93,17,-36,67,60,44,66,22,67,64,-1,98,44,-9,-49,-78,-78,72,-46,69,91,67,-28,1,79,-58,-9,75,9,26,-60,49,-48,-41,-63,-30,-12,8,-6,93,89,-39,-13,-19,4,62,17,-50,-64,-6,-11,97,40,-62,-55,-95,-74,44,-58,-6,13,-96,72,-71,-30,50,-55,85,26,-25,10,-34,65,-22,-68,-94,-93,-31,82,-84,2,29,10,51,3,-16,-41,34,-95,-38,-33,-85,54,-92,70,-50,59,-41,-42,-79,-80,-97,-19,69,62,-41,1,-44,50,-92,80,-23,-91,-82,31,-16,19,-10,39,30,-51,-94,-43,14,-47,-75,73,-46,16,-63,-25,8,-8,85,27,-73,-61,4,-100);  
    }

    public void maxRotateFunction(int... nums) {
        if (nums.length < 2)
            return ;

        int n = nums.length, maxSum = Integer.MIN_VALUE;
        int rotateFactor = 0;

        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += (nums[(j + rotateFactor) % n]) * j;
            }
            rotateFactor++;
            maxSum = Math.max(maxSum, sum);
        }

         System.out.println(maxSum);
    }
}
